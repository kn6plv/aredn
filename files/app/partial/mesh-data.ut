{%

print("<script>\n");
print("window.mesh = {");

const reHostsOlsr = regexp("^([0-9.]+)[ \t]+([^ \t]+)[ \t]+#[ \t]+([0-9.]+)");
const reServices = regexp("^([^|]+)\\|(tcp|udp)\\|(.+)[ \t]+#([0-9.]+).*$");

print("etx:[");
const routes = olsr.getRoutes();
for (let i = 0; i < length(routes); i++) {
    const node = routes[i];
    if (node.genmask !== 0 && node.etx <= 50) {
        print(`["${node.destination}",${sprintf("%.1f", node.etx)}],`);
    }
}
print("].sort((a,b)=>a[1]-b[1]),hosts:{");
const h = fs.open("/var/run/hosts_olsr");
if (h) {
    let originator = null;
    for (;;) {
        const line = h.read("line");
        if (!length(line)) {
            break;
        }
        const v = match(line, reHostsOlsr);
        if (v) {
            if (originator !== v[3]) {
                if (originator) {
                    print("],");
                }
                originator = v[3];
                print(`"${v[3]}":[`);
            }
            const host = v[2];
            if (index(host, "mid") !== 0 && index(host, "dtdlink") !== 0 && index(host, "xlink") !== 0) {
                if (v[1] === originator) {
                    print(`["${host}"],`);
                }
                else {
                    print(`["${host}","${v[1]}"],`);
                }
            }
        }
    }
    print("]");
    h.close();
}
print("},services:{");
const s = fs.open("/var/run/services_olsr");
if (s) {
    let ip = null;
    for (;;) {
        const line = s.read("line");
        if (!length(line)) {
            break;
        }
        const v = match(line, reServices);
        if (v) {
            if (ip !== v[4]) {
                if (ip) {
                    print("],");
                }
                ip = v[4];
                print(`"${v[4]}":[`);
            }
            print(`{name:"${v[3]}",url:"${v[1]}"},`);
        }
    }
    print("]");
    s.close();
}
print("}};\n");
print("</script>\n");

%}
