{%
/*
 * Part of AREDN速 -- Used for creating Amateur Radio Emergency Data Networks
 * Copyright (C) 2024 Tim Wilkinson
 * See Contributors file for additional contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation version 3 of the License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Additional Terms:
 *
 * Additional use restrictions exist on the AREDN速 trademark and logo.
 * See AREDNLicense.txt for more info.
 *
 * Attributions to the AREDN速 Project must be retained in the source code.
 * If importing this code into a new or existing project attribution
 * to the AREDN速 project must be added to the source code.
 *
 * You must not misrepresent the origin of the material contained within.
 *
 * Modified versions must be modified to attribute to the original source
 * and be marked in reasonable ways as differentiate it from the original
 * version
 */
%}
{%
    const reService = regexp("^([^|]+)\\|(tcp|udp)\\|(.+)\\s+#(.*)$");
    const reUrl = regexp("^(.+://)([^:]+):(\\d+)(.*)$");
    const reNameType = regexp("^(.*)\\[(.*)\\]$");
    const services = [];
    const devices = [];
    const leases = {};
    let f = fs.open("/var/run/services_olsr");
    if (f) {
        for (let l = f.read("line"); length(l); l = f.read("line")) {
            const v = match(l, reService);
            // v[1] == url, v[3] == name, v[4] == ip address | my own service
            if (v && trim(v[4]) === "my own service") {
                const r = match(v[1], reUrl);
                if (r) {
                    let type = "";
                    const nt = match(v[3], reNameType);
                    if (nt) {
                        v[3] = nt[1];
                        type += `<div class="icon ${nt[2]}"></div>`;
                    }
                    switch (r[3]) {
                        case "0":
                            push(services, `<div class="service">${v[3]}${type}</div>`);
                            break;
                        case "80":
                        case "443":
                            push(services, `<div class="service"><a href="${r[1]}${r[2]}.local.mesh${r[4]}" onclick="event.stopPropagation()">${v[3]}${type}</a></div>`);
                            break;
                        default:
                            push(services, `<div class="service"><a href="${r[1]}${r[2]}.local.mesh:${r[3]}${r[4]}" onclick="event.stopPropagation()">${v[3]}${type}</a></div>`);
                            break;
                    }
                }
            }
        }
        f.close();
    }
    const dhcp = configuration.getDHCP();
    f = fs.open(dhcp.reservations);
    if (f) {
        for (let l = f.read("line"); length(l); l = f.read("line")) {
            const v = match(trim(l), /^([^ ]+) ([^ ]+) ([^ ]+) ?(.*)/);
            if (v && v[4] !== "#NOPROP") {
                push(devices, `<div class="device">${v[3]}</div>`);
            }
        }
        f.close();
    }
%}
<div class="ctrl" hx-get="status/e/local-services" hx-target="#ctrl-modal">
    <div class="section-title">Local Services</div>
    <div class="section">
    {%
        if (length(services) === 0) {
            print("None");
        }
        else {
            print("<div class='cols'>");
            for (let i = 0; i < length(services); i++) {
                print(services[i]);
            }
            print("</div>");
        }
    %}
    </div>
</div>
<hr>
<div class="noctrl">
    <div class="section-title">Local Devices</div>
    <div class="section">
    {%
        if (length(devices) === 0) {
            print("None");
        }
        else {
            print("<div class='cols'>");
            for (let i = 0; i < length(devices); i++) {
                print(devices[i]);
            }
            print("</div>");
        }
    %}
    </div>
</div>
