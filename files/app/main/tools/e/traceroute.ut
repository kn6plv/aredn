{%
const nodes = mesh.getNodeList(true);
const mynode = configuration.getName();
%}
<dialog class="wide">
    {{_R("tool-header", "Traceroute")}}
    <div class="simple-tool compact client-server">
        <div class="cols">
            <div>
                <div class="o">Target A&zwnj;ddress</div>
                <div class="m">IP A&zwnj;ddress, Hostname or Node</div>
            </div>
            <div>
                <input id="tool-target" type="text" size="40" required>
                <select id="tool-select">
                    <option value="">&#x25BC;</option>
                    <option value="{{mynode}}">{{mynode}}</option>
                    {%
                        for (let i = 0; i < length(nodes); i++) {
                            if (nodes[i] !== mynode) {
                                print(`<option value="${nodes[i]}">${nodes[i]}</option>`);
                            }
                        }
                    %}
                </select>
                <button id="target-swap"><div class="icon updownarrow"></div></button>
            </div>
        </div>
        <div class="cols">
            <div>
                <div class="o">Source A&zwnj;ddress</div>
                <div class="m">IP A&zwnj;ddress, Hostname or Node</div>
            </div>
            <div>
                <input id="tool-client" type="text" size="40" required value="{{mynode}}">
                <select id="tool-client-select">
                    <option value="">&#x25BC;</option>
                    <option value="{{mynode}}">{{mynode}}</option>
                    {%
                        for (let i = 0; i < length(nodes); i++) {
                            if (nodes[i] !== mynode) {
                                print(`<option value="${nodes[i]}">${nodes[i]}</option>`);
                            }
                        }
                    %}
                </select>
                <div style="width:42px"></div>
            </div>
        </div>
        <div class="cols">
            <div class="tool-console">
                <pre></pre>
            </div>
            <div>
                <button id="tool-start">Go</button>
            </div>
        </div>
    </div>
    <script>
    (function(){
        const mynode = "{{mynode}}";
        htmx.on("#tool-select", "change", e => {
            if (e.target.value !== "") {
                htmx.find("#tool-target").value = e.target.value;
                e.target.value = "";
            }
        });
         htmx.on("#tool-client-select", "change", e => {
            if (e.target.value !== "") {
                htmx.find("#tool-client").value = e.target.value;
                e.target.value = "";
            }
        });
        htmx.on("#target-swap", "click", _ => {
            const v = htmx.find("#tool-target").value;
            htmx.find("#tool-target").value = htmx.find("#tool-client").value;
            htmx.find("#tool-client").value = v;
        });
        htmx.on("#tool-start", "click", async _ => {
            const server = htmx.find("#tool-target").value;
            const client = htmx.find("#tool-client").value;
            if (server && client) {
                const con = htmx.find(".tool-console pre");
                con.innerText = "";
                function out(line) {
                    con.innerText += `${line}\n`;
                }
                out("Traceroute test started");
                out("");
                const r = await fetch(`http://${client}${client.indexOf(".") == -1 ? ".local.mesh" : ""}/cgi-bin/traceroute?server=${server}${server.indexOf(".") == -1 ? ".local.mesh" : ""}`);
                const reader = r.body.getReader();
                let state = "BEGIN";
                for (;;) {
                    const { done, value } = await reader.read();
                    if (done) {
                        if (state !== "DONE") {
                            out("Traceroute Terminated.");
                        }
                        break;
                    }
                    const lines = String.fromCharCode.apply(null, value).split("\n");
                    lines.forEach(line => {
                        line = line.trim();
                        switch (state) {
                            case "BEGIN":
                            {
                                const m = line.match(/<title>(.*)<\/title>/);
                                if (m) {
                                    if (m[1] === "SUCCESS") {
                                        state = "CONNECTING";
                                        out(`Source: ${client}`);
                                        out(`Target: ${server}`);
                                        out("");
                                    }
                                    else {
                                        state = "ERROR";
                                        const m = line.match(/<pre>(.*)<\/pre>/);
                                        if (m) {
                                            out(`ERROR: ${m[1]}`);
                                            state = "DONE";
                                        }
                                    }
                                }
                                break;
                            }
                            case "CONNECTING":
                                if (line.match(/^traceroute/)) {
                                    state = "PRINT";
                                    out(line);
                                }
                                break;
                            case "PRINT":
                                if (line) {
                                    if (line === "</pre></body></html>") {
                                        state = "DONE";
                                        out("");
                                        out("Traceroute done");
                                    }
                                    else {
                                        out(line);
                                    }
                                }
                                break;
                            case "ERROR":
                            {
                                const m = line.match(/<pre>(.*)<\/pre>/);
                                if (m) {
                                    out(`ERROR: ${m[1]}`);
                                    state = "DONE";
                                }
                                break;
                            }
                            case "DONE":
                            default:
                                break;
                        }
                    });
                }
            }
        });
    })();
    </script>
    {{_R("tool-footer")}}
</dialog>
