{%
if (request.env.REQUEST_METHOD === "GET" && substr(request.env.QUERY_STRING, 0, 2) === "h=") {
    const target = substr(request.env.QUERY_STRING, 2);
    response.override = true;
    uhttpd.send("Status: 200 OK\r\nContent-Type: text/event-stream\r\nCache-Control: no-store\r\n\r\n");
    uhttpd.send(`event: line\r\ndata: ping -c 5 -w 10 ${target}\r\n\r\n`);
    const f = fs.popen(`/bin/ping -c 5 -w 10 ${target} 2>&1`);
    if (!f) {
        uhttpd.send(`event: close\r\ndata: ping failed\r\n\r\n`);
        return;
    }
    for (let l = f.read("line"); length(l); l = f.read("line")) {
        uhttpd.send(`event: line\r\ndata: ${trim(l)}\r\n\r\n`);
    }
    f.close();
    uhttpd.send(`event: close\r\ndata:\r\n\r\n`);
    return;
}
const nodes = mesh.getNodeList(true);
%}
<dialog class="wide">
    {{ _R("tool-header", "Ping") }}
    <div class="simple-tool">
        <div class="cols">
            <div>
                <div class="o">Network Address</div>
                <div class="m">IP Address, Hostname or Node</div>
            </div>
            <div>
                <input id="tool-target" type="text" size="40" required>
                <select id="tool-select">
                    <option value="">&#x25BC;</option>
                    {%
                        for (let i = 0; i < length(nodes); i++) {
                            print(`<option value="${nodes[i]}">${nodes[i]}</option>`);
                        }
                    %}
                </select>
            </div>
        </div>
        <div class="cols">
            <div class="tool-console">
                <pre></pre>
            </div>
            <div>
                <button id="tool-start">Go</button>
            </div>
        </div>
    </div>
    <script>
    (function(){
        let source = null;
        htmx.on("#tool-select", "change", e => {
            if (e.target.value !== "") {
                htmx.find("#tool-target").value = e.target.value;
                e.target.value = "";
            }
        });
        htmx.on("#tool-start", "click", _ => {
            const target = htmx.find("#tool-target").value;
            if (target) {
                const con = htmx.find(".tool-console pre");
                con.innerText = "";
                if (source) {
                    source.close();
                }
                source = new EventSource(`{{ request.env.REQUEST_URI }}?h=${target}`);
                source.addEventListener("close", e => {
                    source.close();
                    source = null;
                    if (e.data) {
                        con.innerText += `Error: ${e.data}\n`;
                    }
                });
                source.addEventListener("line", e => {
                    con.innerText += `${e.data}\n`;
                });
            }
        });
    })();
    </script>
    {{ _R("tool-footer") }}
</dialog>
