{% if (request.env.REQUEST_METHOD === "PUT") {
    configuration.prepareChanges();
    const userb = split(uciMesh.get("aredn", "@lqm[0]", "user_blocks"), ",");
    const blockedmacs = {};
    for (let i = 0; i < length(userb); i++) {
        blockedmacs[uc(userb[i])] = true;
    }
    const usera = split(uciMesh.get("aredn", "@lqm[0]", "user_allows"), ",");
    const allowedmacs = {};
    for (let i = 0; i < length(usera); i++) {
        allowedmacs[uc(usera[i])] = true;
    }
    for (let mac in request.args) {
        if (request.args[mac] === "always") {
            delete blockedmacs[uc(mac)];
            allowedmacs[uc(mac)] = true;
        }
        else if (request.args[mac] === "user") {
            blockedmacs[uc(mac)] = true;
            delete allowedmacs[uc(mac)];
        }
        else {
            delete blockedmacs[uc(mac)];
            delete allowedmacs[uc(mac)];
        }
    }
    uciMesh.set("aredn", "@lqm[0]", "user_blocks", join(",", keys(blockedmacs)));
    uciMesh.set("aredn", "@lqm[0]", "user_allows", join(",", keys(allowedmacs)));
    uciMesh.commit("aredn");
%}
{{ _R("changes") }}
{% return; } %}
{%
    const refs = {};
    const neighbors = [];
    const blockedmacs = {};
    const user = split(uciMesh.get("aredn", "@lqm[0]", "user_blocks"), ",");
    for (let i = 0; i < length(user); i++) {
        blockedmacs[uc(user[i])] = true;
    }
    const usera = split(uciMesh.get("aredn", "@lqm[0]", "user_allows"), ",");
    const allowedmacs = {};
    for (let i = 0; i < length(usera); i++) {
        allowedmacs[uc(usera[i])] = true;
    }
    const trackers = lqm.getTrackers();
    for (mac in trackers) {
        const tracker = trackers[mac];
        if (tracker.hostname || (tracker.ip && tracker.routable)) {
            if (tracker.type !== "DtD" || tracker.distance >= 50) {
                if (allowedmacs[uc(tracker.mac)]) {
                    tracker.user_allow = true;
                }
                else if (blockedmacs[uc(tracker.mac)]) {
                    tracker.blocks.user = true;
                }
                const r = { name: tracker.hostname || `|${tracker.ip}`, n: tracker, l: null };
                refs[tracker.ip] = r;
                push(neighbors, r);
            }
        }
    }
    const o = olsr.getLinks();
    for (let i = 0; i < length(o); i++) {
        const r = refs[o[i].remoteIP];
        if (r) {
            r.l = o[i];
        }
    }
    sort(neighbors, (a, b) => a.name == b.name ? 0 : a.name < b.name ? -1 : 1);
%}
<dialog>
    {{ _R("dialog-header", "Neighborhood Devices") }}
    <div>
        {%
        function state(n)
        {
            if (n.blocks.user) {
                return "blocked by user";
            }
            if (n.blocked) {
                if (n.blocks.signal) {
                    return "blocked: low snr";
                }
                if (n.blocks.distance) {
                    return "blocked: too far away";
                }
                if (n.blocks.quality) {
                    return "blocked: bad data path";
                }
                if (n.blocks.dup || n.blocks.dtd) {
                    return "blocked: duplicate link";
                }
                return "blocked";
            }
            if (n.routable) {
                if ((n.blocks.signal || n.blocks.distance || n.blocks.quality) && (
                   (n.leaf === "major" && n.rev_leaf === "minor") || (n.leaf === "minor" && n.rev_leaf === "major"))) {
                    return "routing leaf";
                }
                return "routing";
            }
            return "unused";
        }
        function map(n, v)
        {
            const map_url = uci.get("aredn", "@location[0]", "map");
            if (n.lat && n.lon && map_url) {
                return `<a href="${replace(replace(map_url, "(lat)", n.lat), "(lon)", n.lon)}" target="_blank">${v}</a>`;
            }
            return v;
        }
        for (let i = 0; i < length(neighbors); i++) {
            const n = neighbors[i].n;
            const l = neighbors[i].l;
        %}
        <div class="neighbor">
            <div class="o"><a href="{{ n.hostname ? `http://${n.hostname}.local.mesh` : n.ip }}" target="_blank">{{ n.hostname || n.ip }}</a>
                <select name="{{n.mac}}" hx-put={{ request.env.REQUEST_URI }} hx-swap="none">
                    <option value="always" {{ n.user_allow ? "selected" : "" }}>never block</option>
                    <option value="available" {{ n.user_allow || n.blocks.user ? "" : "selected" }}>{{ n.blocked ? "blocked" : "unblocked" }}</option>
                    <option value="user" {{ n.blocks.user ? "selected" : "" }}>always block</option>
                </select>
            </div>
            <div class="cols">
                <div class="i">
                    <div>{{ n.type }}</div>
                    <div>type</div>
                </div>
                <div class="i">
                    <div>{{ n.mac }}</div>
                    <div>mac address</div>
                </div>
                <div class="i">
                    <div>{{ n.ip }}</div>
                    <div>ip address</div>
                </div>
            </div>
            <div class="cols">
                <div class="i">
                    <div>{{ map(n, n.lat) || "-" }}</div>
                    <div>latitude</div>
                </div>
                <div class="i">
                    <div>{{ map(n, n.lon) || "-" }}</div>
                    <div>longitude</div>
                </div>
                <div class="i">
                    <div>{{ "distance" in n ? map(n, sprintf("%.1f %s", units.meters2distance(n.distance), units.distanceUnit())) : "-" }}</div>
                    <div>distance</div>
                </div>
            </div>
            {%
                if (l && l.lossMultiplier) {
                    const lq = int(100 * l.linkQuality * 65536 / l.lossMultiplier);
                    const nlq = int(100 * l.neighborLinkQuality * 65536 / l.lossMultiplier);
                    const etx = 10000.0 / (lq * nlq);
            %}
            <div class="cols">
                <div class="i">
                    <div>{{ lq }}%</div>
                    <div>lq | rx success</div>
                </div>
                <div class="i">
                    <div>{{ nlq }}%</div>
                    <div>nlq | tx success</div>
                </div>
                <div class="i">
                    <div>{{ sprintf("%.1f", etx) }}</div>
                    <div>etx</div>
                </div>
            </div>
            {% } %}
            <div class="cols">
                <div class="i">
                    <div>{{ type(n.ping_success_time) ? sprintf("%.1f ms", n.ping_success_time * 1000) : "-" }}</div>
                    <div>ping time</div>
                </div>
                <div class="i">
                    <div>{{ type(n.ping_quality) ? sprintf("%d%%", n.ping_quality) : "-" }}</div>
                    <div>ping success</div>
                </div>
                <div class="i">
                    <div>{{ type(n.avg_tx) ? sprintf("%.1f pkt/sec", n.avg_tx / 60) : "-" }}</div>
                    <div>avg tx</div>
                </div>
            </div>
            {% if (n.type == "RF") { %}
            <div class="cols">
                <div class="i">
                    <div>{{ n.snr }}</div>
                    <div>local snr</div>
                </div>
                <div class="i">
                    <div>{{ n.rev_snr || "-" }}</div>
                    <div>neighbor snr</div>
                </div>
                <div class="i">
                    <div>{{ n.avg_tx_fail ? sprintf("%.1f%%", 100 * n.avg_tx_fail / n.avg_tx) : "-" }}</div>
                    <div>tx failures</div>
                </div>
            </div>
            <div class="cols">
                <div class="i">
                    <div>{{ n.rx_bitrate ? sprintf("%.1f Mbps", n.rx_bitrate) : "-" }}</div>
                    <div>physical rx bitrate</div>
                </div>
                <div class="i">
                    <div>{{ n.tx_bitrate ? sprintf("%.1f Mbps", n.tx_bitrate) : "-" }}</div>
                    <div>physical tx bitrate</div>
                </div>
                <div class="i">
                    <div>{{ n.avg_tx_retries ? sprintf("%.1f%%", 100 * n.avg_tx_retries / n.avg_tx) : "-" }}</div>
                    <div>tx retransmissions</div>
                </div>
            </div>
            {% } else if (type(n.avg_tx_fail)) { %}
            <div class="cols">
                <div class="i">
                    <div>{{ sprintf("%.1f%%", 100 * n.avg_tx_fail / n.avg_tx) }}</div>
                    <div>tx failures</div>
                </div>
                <div></div>
                <div></div>
            </div>
            {% } %}
            <div class="cols">
                <div class="i">
                    <div>{{ state(n) }}</div>
                    <div>state</div>
                </div>
                <div class="i">
                    <div>{{ n.node_route_count }}</div>
                    <div>active routes</div>
                </div>
                <div></div>
            </div>
        </div>
        {% } %}
    </div>
    {{ _R("dialog-footer") }}
</dialog>
