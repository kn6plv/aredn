{% if (request.env.REQUEST_METHOD === "PUT") {
    configuration.prepareChanges();
    const user = split(uciMesh.get("aredn", "@lqm[0]", "user_blocks"), ",");
    const blockedmacs = {};
    for (let i = 0; i < length(user); i++) {
        blockedmacs[uc(user[i])] = true;
    }
    for (let mac in request.args) {
        if (request.args[mac] === "user") {
            blockedmacs[uc(mac)] = true;
        }
        else {
            delete blockedmacs[uc(mac)];
        }
    }
    uciMesh.set("aredn", "@lqm[0]", "user_blocks", join(",", keys(blockedmacs)));
    uciMesh.commit("aredn");
%}
{{ _R("changes") }}
{% return; } %}
{%
    const refs = {};
    const neighbors = [];
    const blockedmacs = {};
    const user = split(uciMesh.get("aredn", "@lqm[0]", "user_blocks"), ",");
    for (let i = 0; i < length(user); i++) {
        blockedmacs[uc(user[i])] = true;
    }
    const trackers = lqm.getTrackers();
    for (mac in trackers) {
        const tracker = trackers[mac];
        if (tracker.hostname || (tracker.ip && tracker.routable)) {
            if (tracker.type !== "DtD" || tracker.distance >= 50) {
                if (blockedmacs[uc(tracker.mac)]) {
                    tracker.blocks.user = true;
                }
                const r = { name: tracker.hostname || `|${tracker.ip}`, n: tracker, l: null };
                refs[tracker.ip] = r;
                push(neighbors, r);
            }
        }
    }
    const o = olsr.getLinks();
    for (let i = 0; i < length(o); i++) {
        const r = refs[o[i].remoteIP];
        if (r) {
            r.l = o[i];
        }
    }
    sort(neighbors, (a, b) => a.name == b.name ? 0 : a.name < b.name ? -1 : 1);
%}
<dialog>
    {{ _R("dialog-header", "Neighborhood Devices") }}
    <div>
        {%
        function state(n)
        {
            if (n.blocked) {
                if (n.blocks.signal) {
                    return "blocked: low snr";
                }
                if (n.blocks.distance) {
                    return "blocked: too far away";
                }
                if (n.blocks.dup || n.blocks.dtd) {
                    return "blocked: duplicate link";
                }
                if (n.blocks.user) {
                    return "blocked by user";
                }
                return "blocked";
            }
            if (n.blocks.user) {
                return "blocked by user";
            }
            if (n.routable) {
                return "routing traffic";
            }
            return "unused";
        }
        for (let i = 0; i < length(neighbors); i++) {
            const n = neighbors[i].n;
            const l = neighbors[i].l;
        %}
        <div class="neighbor">
            <div class="o">{{ n.hostname || n.ip }}
                <select name="{{n.mac}}" hx-put={{ request.env.REQUEST_URI }} hx-swap="none">
                    <option value="available" {{ n.blocks.user ? "" : "selected" }}>{{ n.blocked ? "blocked" : "unblocked" }}</option>
                    <option value="user" {{ n.blocks.user ? "selected" : "" }}>user blocked</option>
                </select>
            </div>
            <div class="cols">
                <div class="i">
                    <div>{{ n.type }}</div>
                    <div>type</div>
                </div>
                <div class="i">
                    <div>{{ n.mac }}</div>
                    <div>mac address</div>
                </div>
                <div class="i">
                    <div>{{ n.ip }}</div>
                    <div>ip address</div>
                </div>
            </div>
            <div class="cols">
                <div class="i">
                    <div>{{ n.lat || "-" }}</div>
                    <div>latitude</div>
                </div>
                <div class="i">
                    <div>{{ n.lon || "-" }}</div>
                    <div>longitude</div>
                </div>
                <div class="i">
                    <div>{{ "distance" in n ? sprintf("%.1f %s", units.meters2distance(n.distance), units.distanceUnit()) : "-" }}</div>
                    <div>distance</div>
                </div>
            </div>
            <div class="cols">
                <div class="i">
                    <div>{{ sprintf("%.1f", n.ping_success_time * 1000) }} ms</div>
                    <div>ping time</div>
                </div>
                <div class="i">
                    <div>{{ n.ping_quality }}%</div>
                    <div>ping success</div>
                </div>
                <div></div>
            </div>
            {%
                if (l && l.lossMultiplier) {
                    const lq = int(100 * l.linkQuality * 65536 / l.lossMultiplier);
                    const nlq = int(100 * l.neighborLinkQuality * 65536 / l.lossMultiplier);
                    const etx = 10000 / (lq * nlq);
            %}
            <div class="cols">
                <div class="i">
                    <div>{{ lq }}%</div>
                    <div>lq</div>
                </div>
                <div class="i">
                    <div>{{ nlq }}%</div>
                    <div>nlq</div>
                </div>
                <div class="i">
                    <div>{{ sprintf("%.1f", etx) }}</div>
                    <div>etx</div>
                </div>
            </div>
            {% } %}
            {% if (n.type == "RF") { %}
            <div class="cols">
                <div class="i">
                    <div>{{ n.snr }} dB</div>
                    <div>snr</div>
                </div>
                <div class="i">
                    <div>{{ n.rev_snr || "-" }} dB</div>
                    <div>reverse snr</div>
                </div>
                <div></div>
            </div>
            <div class="cols">
                <div class="i">
                    <div>{{ n.rx_bitrate ? sprintf("%.1f", n.tx_bitrate) : "-" }} mbps</div>
                    <div>physical tx bitrate</div>
                </div>
                <div class="i">
                    <div>{{ n.rx_bitrate ? sprintf("%.1f", n.rx_bitrate) : "-" }} mpbs</div>
                    <div>physical rx bitrate</div>
                </div>
                <div class="i">
                    <div>{{ sprint("%.1f", 100 * (n.last_tx_total - n.tx_total) / n.tx_total) }}%</div>
                    <div>retransmissions</div>
                </div>
            </div>
            {% } %}
            <div class="cols">
                <div class="i">
                    <div>{{ state(n) }}</div>
                    <div>state</div>
                </div>
                <div></div>
                <div></div>
            </div>
        </div>
        {% } %}
    </div>
    {{ _R("dialog-footer") }}
</dialog>
