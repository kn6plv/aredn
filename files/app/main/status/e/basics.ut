{%
function getSshKeys()
{
    let options = "<option value='-'>-</option>";
    const f = fs.open("/etc/dropbear/authorized_keys");
    if (f) {
        const re = /^(.+) (.+) (.+)$/;
        for (let l = f.read("line"); length(l); l = f.read("line")) {
            const m = match(trim(l), re);
            if (m) {
                options += `<option value="${m[3]}">${m[3]}</option>`;
            }
        }
        f.close();
    }
    return options;
}
if (request.env.REQUEST_METHOD === "PUT") {
    configuration.prepareChanges();
    if ("description_node" in request.args) {
        configuration.setSetting("description_node", replace(request.args.description_node || "", "'", "â€™"));
    }
    if ("node_name" in request.args) {
        const name = request.args.node_name;
        configuration.setName(name);
        uciMesh.foreach("vtun", "server", s => {
            const netip = s.netip;
            if (index(net, ":") === -1) {
                const np = split(netip, ":");
                const n = iptoarr(np[0]);
                uciMesh.set("vtun", s[".name"], "node", `${uc(substr(name, 0, 23))}-${n[0]}-${n[1]}-${n[2]}-${n[3]}:${np[1]}`);
            }
            else {
                const n = iptoarr(netip);
                uciMesh.set("vtun", s[".name"], "node", `${uc(substr(name, 0, 23))}-${n[0]}-${n[1]}-${n[2]}-${n[3]}`);
            }
        });
        uciMesh.commit("vtun");
    }
    if ("passwd" in request.args) {
        configuration.setPassword(request.args.passwd);
    }
    if ("ssh_remove" in request.args) {
        print(request.args);
        const keys = split(fs.readfile("/etc/dropbear/authorized_keys"), "\n");
        const re = /^(.+) (.+) (.+)$/;
        for (let i = 0; i < length(keys); i++) {
            const m = match(keys[i], re);
            if (m && m[3] === request.args.ssh_remove) {
                splice(keys, i, 1);
                break;
            }
        }
        fs.writefile("/etc/dropbear/authorized_keys", join("\n", keys));
        print(getSshKeys());
    }
    if ("ssh_add" in request.args) {
        configuration.prepareChanges();
        const key = fs.readfile(request.args.ssh_add);
        if (key && match(trim(key), /^(ssh-rsa|ecdsa-sha2-nistp256) [a-zA-Z0-9+\/=]+ .+$/)) {
            const keys = fs.readfile("/etc/dropbear/authorized_keys") || "";
            fs.writefile("/etc/dropbear/authorized_keys", `${keys}${key}`);
        }
        print(getSshKeys());
    }
    configuration.saveSettings();
    print(_R("changes"));
    return;
}
%}
<dialog class="basics">
    {{_R("dialog-header", "Name &amp; Security")}}
    <div>
        <div class="cols">
            <div>
                <div class="o">Node Name</div>
                <div class="m">This node's unique name</div>
            </div>
            <div style="flex:0">
                <input name="node_name" hx-put="{{request.env.REQUEST_URI}}" hx-swap="none" type="text" minlength="4" maxlength="63" size="30" required pattern="[^']+" value="{{configuration.getName()}}">
            </div>
        </div>
        <div class="cols">
            <div>
                <div class="o">Description</div>
                <div class="m">Information about this node</div>
            </div>
            <div style="flex:0">
                <textarea name="description_node" style="width:340px" rows="2" columns="80" hx-put="{{request.env.REQUEST_URI}}">{{configuration.getSettingAsString("description_node", "")}}</textarea>
            </div>
        </div>
        {{_H("Some optional descriptive text about this node. This can be anything you think relevant.
        People include various thing, such as some basic information about the location or hardware or
        the services this node provides. Some people include alternate ways to reach the owner (e.g email
        address).")}}
        <div class="password">
            <div class="cols">
                <div>
                    <div class="o">New Password</div>
                    <div class="m">Change the node password</div>
                </div>
                <div>
                    <input name="passwd1" type="password" pattern="`[^#'"]+"><button class="icon eye"></button>
                </div>
            </div>
            <div class="cols">
                <div>
                    <div class="o">Retype Password</div>
                    <div class="m">Passwords must match</div>
                </div>
                <div>
                    <input name="passwd2" type="password" pattern=""><button class="icon eye"></button>
                </div>
            </div>
        </div>
        {{_R("dialog-advanced")}}
        <div>
            <div class="cols">
                <div>
                    <div class="o">Upload SSH Key</div>
                    <div class="m">Add SSH key</div>
                </div>
                <div>
                    <input name="ssh_add" type="file" accept=".pub">
                </div>
            </div>
            <div class="cols">
                <div>
                    <div class="o">Remove SSH Key</div>
                    <div class="m">Delete SSH key</div>
                </div>
                <div style="flex:0">
                    <select name="ssh_remove">{{getSshKeys()}}</select>
                </div>
            </div>
            <div class="cols">
                <div></div>
                <div style="flex:0">
                    <button id="ssh_change" disabled hx-trigger="none" hx-encoding="multipart/form-data">Upload or Remove Key</button>
                </div>
            </div>
        </div>
    </div>
    {{_R("dialog-footer")}}
    <script>
    (function(){
        htmx.on("dialog input[name=passwd1]", "keyup", e => {
            const v = e.target.value;
            if (v === "hsmm") {
                htmx.find("dialog input[name=passwd1]").pattern = "BAD";
            }
            else {
                htmx.find("dialog input[name=passwd1]").pattern = `[^#'"]+`;
            }
            htmx.find("dialog input[name=passwd2]").required = v ? "required" : "";
            htmx.find("dialog input[name=passwd2]").pattern = v;
        });
        htmx.on("#dialog-done", "click", _ => {
            const passwd1 = htmx.find("dialog input[name=passwd1]");
            const passwd2 = htmx.find("dialog input[name=passwd2]");
            if (passwd1.validity.valid && passwd2.validity.valid && passwd1.value !== "" && passwd1.value === passwd2.value) {
                htmx.ajax("PUT", "{{request.env.REQUEST_URI}}", {
                    values: {
                        passwd: passwd1.value
                    },
                    swap: "none"
                });
            }
        });
        function toggle()
        {
            const t = htmx.find("dialog input[name=passwd1]").type;
            htmx.find("dialog input[name=passwd1]").type = t === "text" ? "password" : "text";
            htmx.find("dialog input[name=passwd2]").type = t === "text" ? "password" : "text";
        }
        htmx.on("dialog input[name=passwd1] + button", "click", toggle);
        htmx.on("dialog input[name=passwd2] + button", "click", toggle);
        htmx.on("dialog input[name=ssh_add]", "change", e => {
            htmx.find("dialog select[name=ssh_remove]").value = "-";
            if (e.target.value === "-") {
                htmx.find("dialog #ssh_change").disabled = true;
                htmx.find("dialog #ssh_change").innerHTML = "Upload or Remove Key";
            }
            else {
                htmx.find("dialog #ssh_change").disabled = false;
                htmx.find("dialog #ssh_change").innerHTML = "Upload Key";
            }
        });
        htmx.on("dialog select[name=ssh_remove]", "change", e => {
            htmx.find("dialog input[name=ssh_add]").value = "";
            if (e.target.value === "-") {
                htmx.find("dialog #ssh_change").disabled = true;
                htmx.find("dialog #ssh_change").innerHTML = "Upload or Remove Key";
            }
            else {
                htmx.find("dialog #ssh_change").disabled = false;
                htmx.find("dialog #ssh_change").innerHTML = "Remove Key";
            }
        });
        htmx.on("dialog #ssh_change", "click", e => {
            const upload = htmx.find("dialog input[name=ssh_add]").files[0];
            const remove = htmx.find("dialog select[name=ssh_remove]").value;
            if (upload) {
                htmx.ajax("PUT", "{{request.env.REQUEST_URI}}", {
                    source: e.currentTarget,
                    values: {
                        "ssh_add": upload
                    },
                    target: "dialog select[name=ssh_remove]"
                }).then(_ => htmx.find("dialog input[name=ssh_add]").value = "");
            }
            else if (remove) {
                htmx.ajax("PUT", "{{request.env.REQUEST_URI}}", {
                    values: {
                        "ssh_remove": remove
                    },
                    target: "dialog select[name=ssh_remove]"
                });
            }
            htmx.find("dialog #ssh_change").disabled = true;
            htmx.find("dialog #ssh_change").innerHTML = "Upload or Remove Key";
        });
    })();
    </script>
</dialog>
