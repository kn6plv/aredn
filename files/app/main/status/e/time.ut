{% if (request.env.REQUEST_METHOD === "PUT") {
    configuration.prepareChanges();
    if ("timezone" in request.args) {
        const nt = match(request.args.timezone, /^(.*)\t(.*)$/);
        if (nt) {
            configuration.setSetting("time_zone_name", nt[1]);
            configuration.setSetting("time_zone", nt[2]);
        }
    }
    if ("ntp_server" in request.args) {
        configuration.setSetting("ntp_server", request.args.ntp_server);
    }
    if ("ntp_mode" in request.args) {
        switch (request.args.ntp_mode) {
            case "daily":
            case "hourly":
                uciMesh.set("aredn", "@ntp[0]", "period", request.args.ntp_mode);
                break;
            default:
                break;
        }
    }
    configuration.saveSettings();
    uciMesh.commit("aredn");
%}
{{_R("changes")}}
{% return; } %}
{%
    const time_zone_name = configuration.getSettingAsString("time_zone_name", "UTC");
    const tz_db_names = [];
    const f = fs.open("/etc/zoneinfo");
    if (f) {
        for (;;) {
            const l = rtrim(f.read("line"));
            if (!length(l)) {
                break;
            }
            const nt = split(l, "\t");
            push(tz_db_names, { name: nt[0], value: l });
        }
        f.close();
    }
    const ntp_server = configuration.getSettingAsString("ntp_server", "");
    const ntp_mode = uciMesh.get("aredn", "@ntp[0]", "period") || "daily";
%}
<dialog>
    {{_R("dialog-header", "Time")}}
    <div>
        <div class="cols">
            <div>
                <div class="o">Timezone</div>
                <div class="m">Timezone</div>
            </div>
            <div style="flex:0">
                <select hx-put="{{request.env.REQUEST_URI}}" hx-swap="none" name="timezone">
                    {%
                        for (let i = 0; i < length(tz_db_names); i++) {
                            print(`<option value="${tz_db_names[i].value}" ${tz_db_names[i].name == time_zone_name ? "selected" : ""}>${tz_db_names[i].name}</option>`);
                        }
                    %}
                </select>
            </div>
        </div>
        {{_H("The timezone for this node. Setting this correctly means that timed events will run in the appopriate timezone,
        logs will have the expected times, etc.")}}
        <hr>
        <div class="cols">
            <div>
                <div class="o">NTP Server</div>
                <div class="m">The ntp server to sync the time</div>
            </div>
            <div style="flex:0">
                <input hx-put="{{request.env.REQUEST_URI}}" name="ntp_server" type="text" size="20" value="{{ntp_server}}">
            </div>
        </div>
        {{_H("The default NTP server to use when syncing the node's time. If this cannot be found, the node will search for one on the mesh.")}}
        <div class="cols">
            <div>
                <div class="o">NTP Updates</div>
                <div class="m">NTP update frequency</div>
            </div>
            <div style="flex:0">
                <select hx-put="{{request.env.REQUEST_URI}}" hx-swap="none" name="ntp_mode">
                    <option value="hourly" {{ntp_mode == "hourly" ? "selected" : ""}}>Hourly</option>
                    <option value="daily" {{ntp_mode == "daily" ? "selected" : ""}}>Daily</option>
                </select>
            </div>
        </div>
        {{_H("NTP is used to keep the node's time up to date. Syncing the time every day is probably sufficient
        but you can increase the frequency to hourly. Having accurate time means your timed events will run when you expected
        and log information will show meaningful times.")}}
    </div>
    {{_R("dialog-footer")}}
</dialog>
