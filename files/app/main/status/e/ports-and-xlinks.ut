{% if (request.env.REQUEST_METHOD === "PUT") {
    configuration.prepareChanges();
    if ("xlinks" in request.args) {
        const xlinks = {};
        const routes = {};
        const xs = json(request.args.xlinks);
        for (let i = 0; i < length(xs); i++) {
            xlinks[xs[i].name] = xs[i];
        }
        uciMesh.foreach("xlink", "interface", x => {
            const ux = xlinks[x[".name"]];
            if (ux) {
                uciMesh.set("xlink", ux.name, "ifname", `br0.${ux.vlan}`);
                uciMesh.set("xlink", ux.name, "ipaddr", ux.ipaddr);
                if (uciMesh.get("xlink", ux.name, "peer") !== ux.peer) {
                    uciMesh.set("xlink", ux.name, "peer", ux.peer);
                    uciMesh.commit("xlink");
                    uciMesh.set("xlink", ux.name, "peer", ux.peer);
                    routes[ux.name] = ux.peer;
                }
                uciMesh.set("xlink", ux.name, "weight", ux.weight);
                uciMesh.set("xlink", ux.name, "netmask", network.CIDRToNetmask(ux.cidr));
                delete xlinks[ux.name];
            }
            else {
                uciMesh.delete("xlink", x[".name"]);
                routes[x.name] = "";
            }
            uciMesh.commit("xlink");
        });
        uciMesh.foreach("xlink", "route", r => {
            const ur = routes[r.interface];
            if (ur !== undefined) {
                if (ur === "") {
                    uciMesh.delete("xlink", r[".name"]);
                }
                else {
                    uciMesh.set("xlink", r[".name"], "target", ur);
                }
                delete routes[r.interface];
            }
            uciMesh.commit("xlink");
        });
        for (let name in xlinks) {
            const ux = xlinks[name];
            uciMesh.set("xlink", name, "interface");
            uciMesh.set("xlink", name, "ifname", `br0.${ux.vlan}`);
            uciMesh.set("xlink", name, "ipaddr", ux.ipaddr);
            uciMesh.set("xlink", name, "weight", ux.weight);
            uciMesh.set("xlink", name, "netmask", network.CIDRToNetmask(ux.cidr));
            if (ux.peer) {
                uciMesh.set("xlink", name, "peer", ux.peer);
                routes[name] = ux.peer;
            }
            uciMesh.set("xlink", name, "proto", "static");
            uciMesh.set("xlink", name, "macaddr", replace("x2:xx:xx:xx:xx:xx", "x", _ => sprintf("%X",math.rand()&15)));
            uciMesh.commit("xlink");
        }
        for (let name in routes) {
            const r = uciMesh.add("xlink", "route");
            uciMesh.set("xlink", r, "interface", name);
            uciMesh.set("xlink", r, "target", routes[name]);
            uciMesh.commit("xlink");
        }
    }
%}
{{ _R("changes") }}
{% return; } %}
{%
    const ports = hardware.getEthernetPorts();
    const xlinks = [];
    uciMesh.foreach("xlink", "interface", x => {
        push(xlinks, {
            name: x[".name"],
            vlan: int(split(x.ifname, ".")[1]),
            ipaddr: x.ipaddr,
            peer: x.peer || "",
            weight: int(x.weight),
            cidr: network.netmaskToCIDR(x.netmask)
        });
    });
%}
<dialog>
    {{ _R("dialog-header", "Ports &amp; XLinks") }}
    <div>
        <div>
            <div>
                <table style="width:100%;border-collapse:collapse;">
                    <thead>
                        <tr>
                            <td style="width:200px"></td>
                            {%
                                for (let i = 0; i < length(ports); i++) {
                                    print(`<td style="width:45px">${ports[i]}</td>`);
                                }
                            %}
                        </tr>
                    </thead>
                    <tbody>
                        <tr style="height:50px">
                            <td><div>dtdlink</div><div>vlan: 2</div></td>
                            {%
                                for (let i = 0; i < length(ports); i++) {
                                    %}<td><input type="checkbox"></td>{%
                                }
                            %}
                        </tr>
                        <tr style="height:50px">
                            <td><div>lan</div><div>vlan: untagged</div></td>
                            {%
                                for (let i = 0; i < length(ports); i++) {
                                    %}<td><input type="checkbox"></td>{%
                                }
                            %}
                        </tr>
                        <tr style="height:50px">
                            <td><div>wan</div><div>vlan: <input type="text" size="5" placeholder="untagged"></div></td>
                            {%
                                for (let i = 0; i < length(ports); i++) {
                                    %}<td><input type="checkbox"></td>{%
                                }
                            %}
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
        <hr>
        <div class="xlinks">
            <div>
                <div class="cols">
                    <div>
                        <div class="o">XLink</div>
                        <div class="m">Inter-device links across non-AREDN networks</div>
                    </div>
                    <button class="add">+</button>
                </div>
            </div>
            <div id="xlink-list">
                <div class="cols xlink-label">
                    <div style="white-space:nowrap">
                        <div>vlan</div>
                        <div>ip a&zwnj;ddress</div>
                        <div>peer a&zwnj;ddress</div>
                        <div>weight</div>
                        <div>cidr</div>
                    </div>
                    <div></div>
                </div>
                {% for (let i = 0; i < length(xlinks); i++) {
                    const x = xlinks[i];
                %}
                        <div class="cols xlink" data-name="{{ x.name }}">
                            <div>
                                <input name="vlan" type="text" size="5" required pattern="([4-9]|[1-9][0-9]{1,2}|[1-3][0-9]{3}|40[0-8][0-9]|409[0-5])" placeholder="VLan" value="{{ x.vlan }}">
                                <input name="ipaddr" type="text" size="25" required pattern="{{ constants.patIP }}" placeholder="IP A&zwnj;ddress" value="{{ x.ipaddr }}">
                                <input name="peer" type="text" size="25" pattern="{{ constants.patIP }}" placeholder="IP A&zwnj;ddress" value="{{ x.peer }}">
                                <input name="weight" type="text" size="2" required pattern="([0-9]|[1-9][0-9]|100)" placeholder="Weight" value="{{ x.weight }}">
                                <select name="cidr">
                                    <option value="32" {{ x.cidr === 32 ? "selected" : "" }}>-</option>
                                    <option value="31" {{ x.cidr === 31 ? "selected" : "" }}>/ 31</option>
                                    <option value="30" {{ x.cidr === 30 ? "selected" : "" }}>/ 30</option>
                                    <option value="29" {{ x.cidr === 29 ? "selected" : "" }}>/ 29</option>
                                    <option value="28" {{ x.cidr === 28 ? "selected" : "" }}>/ 28</option>
                                    <option value="27" {{ x.cidr === 27 ? "selected" : "" }}>/ 27</option>
                                    <option value="26" {{ x.cidr === 26 ? "selected" : "" }}>/ 26</option>
                                    <option value="25" {{ x.cidr === 25 ? "selected" : "" }}>/ 25</option>
                                    <option value="24" {{ x.cidr === 24 ? "selected" : "" }}>/ 24</option>
                                    <option value="23" {{ x.cidr === 23 ? "selected" : "" }}>/ 23</option>
                                    <option value="22" {{ x.cidr === 22 ? "selected" : "" }}>/ 22</option>
                                    <option value="21" {{ x.cidr === 21 ? "selected" : "" }}>/ 21</option>
                                    <option value="20" {{ x.cidr === 20 ? "selected" : "" }}>/ 20</option>
                                    <option value="19" {{ x.cidr === 19 ? "selected" : "" }}>/ 19</option>
                                    <option value="18" {{ x.cidr === 18 ? "selected" : "" }}>/ 18</option>
                                    <option value="17" {{ x.cidr === 17 ? "selected" : "" }}>/ 17</option>
                                    <option value="16" {{ x.cidr === 16 ? "selected" : "" }}>/ 16</option>
                                </select>
                            </div>
                            <button>-</button>
                        </div>
                {% } %}
            </div>
        </div>
    </div>
    {{ _R("dialog-footer") }}
    <script>
    (function(){
        const patIP = "((25[0-5]|(2[0-4]|1[0-9]|[1-9]|)[0-9])\\.?\\b){4}";
        const xlinks = {{ sprintf("%J", xlinks) }};
        function update()
        {
            htmx.ajax("PUT", "{{ request.env.REQUEST_URI }}", {
                swap: "none",
                values: { xlinks: JSON.stringify(xlinks) }
            });
        }
        htmx.on("#ctrl-modal dialog #xlink-list", "change", event => {
            const target = htmx.closest(event.target, "[data-name]");
            const xlink = xlinks.find(x => x.name == target.dataset.name);
            const vlan = htmx.find(target, "[name=vlan]");
            const ipaddr = htmx.find(target, "[name=ipaddr]");
            const peer = htmx.find(target, "[name=peer]");
            const weight = htmx.find(target, "[name=weight]");
            const cidr = htmx.find(target, "[name=cidr]");
            if (vlan.validity.valid && ipaddr.validity.valid && peer.validity.valid && weight.validity.valid && cidr.validity.valid) {
                xlink.vlan = parseInt(vlan.value);
                xlink.ipaddr = ipaddr.value;
                xlink.peer = peer.value;
                xlink.weight = parseInt(weight.value);
                xlink.cidr = parseInt(cidr.value);
                update();
            }
        });
        htmx.on("#ctrl-modal dialog #xlink-list", "click", event => {
            if (event.target.nodeName === "BUTTON") {
                const target = htmx.closest(event.target, "[data-name]");
                const xlink = xlinks.findIndex(x => x.name == target.dataset.name);
                htmx.remove(target);
                xlinks.splice(xlink, 1);
                update();
            }
        });
        htmx.on("#ctrl-modal dialog .xlinks .add", "click", event => {
            let name;
            for (let i = 0;; i++) {
                name = `xlink${i}`;
                if (!htmx.find(`#ctrl-modal dialog #xlink-list .xlink[data-name=${name}]`)) {
                    break;
                }
            }
            const x = {
                name: name,
                vlan: "",
                ipaddr: "",
                peer: "",
                weight: 0,
                cidr: 32
            };
            xlinks.push(x);
            const div = document.createElement("div");
            const ls = htmx.find("#ctrl-modal dialog #xlink-list");
            div.innerHTML = `<div class="cols xlink" data-name="${x.name}">
<div>
    <input name="vlan" type="text" size="5" required pattern="([4-9]|[1-9][0-9]{1,2}|[1-3][0-9]{3}|40[0-8][0-9]|409[0-5])" placeholder="VLan">
    <input name="ipaddr" type="text" size="25" required pattern="${patIP}" placeholder="IP A&zwnj;ddress">
    <input name="peer" type="text" size="25" pattern="${patIP}" placeholder="IP A&zwnj;ddress">
    <input name="weight" type="text" size="2" required pattern="([0-9]|[1-9][0-9]|100)" placeholder="Weight">
    <select name="cidr">
        <option value="32">-</option>
        <option value="31">/ 31</option>
        <option value="30">/ 30</option>
        <option value="29">/ 29</option>
        <option value="28">/ 28</option>
        <option value="27">/ 27</option>
        <option value="26">/ 26</option>
        <option value="25">/ 25</option>
        <option value="24">/ 24</option>
        <option value="23">/ 23</option>
        <option value="22">/ 22</option>
        <option value="21">/ 21</option>
        <option value="20">/ 20</option>
        <option value="19">/ 19</option>
        <option value="18">/ 18</option>
        <option value="17">/ 17</option>
        <option value="16">/ 16</option>
    </select>
</div>
<button>-</button>
</div>`;
            ls.appendChild(div.firstChild);
        });
    })();
    </script>
</dialog>
